@startuml

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
      package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
        class CardStatusHandler {
            {static} - LOG : Logger
            + CardStatusHandler()
            + handleMessage()
            + informAboutCardPresent()
        }
      }
    }


    package de.gematik.ti.cardreader.provider.bluetooth.feitian {
      package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
        class FeitianBluetoothReceiver {
            {static} - LOG : Logger
            + onReceive()
        }
      }
    }


    package de.gematik.ti.cardreader.provider.bluetooth.feitian {
      package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
        class FeitianCardReaderController {
            {static} - LOG : Logger
            {static} - instance : FeitianCardReaderController
            - cardReaders : Map<String, ICardReader>
            - bluetoothAdapter : BluetoothAdapter
            - pairedDevices : Set<BluetoothDevice>
            - context : Context
            - FeitianCardReaderController()
            {static} + getInstance()
            + getCardReaders()
            - init()
            - intitializeBluetoothAdapter()
            - createReceiver()
            - readDevices()
            - checkUuids()
            - addNewAndInform()
            ~ removeAndInform()
            + checkAdapter()
            + actualizeReaderList()
            + actualizeSocketToDevice()
        }
      }
    }


   package de.gematik.ti.cardreader.provider.api {
       class CardEventTransmitter {
           {static} - LOG : Logger
           ~ CardEventTransmitter()
           + informAboutCardPresent()
           + informAboutCardAbsent()
           + informAboutCardUnknown()
           + informAboutCardTimeout()
       }
     }
  

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.entities {
      class FeitianCard {
                - bluetoothCard : Card
                - feitianCardAtr : byte[]
                {static} - MANAGE_CHANNEL_COMMAND_OPEN : CommandAPDU
                {static} - RESPONSE_SUCCESS : int
                - exclusiveThread : Thread
                - props : Properties
                - cardStatusHandler : Handler
                + FeitianCard()
                + getATR()
                + getProtocol()
                + getBasicChannel()
                + openLogicalChannel()
                ~ transceive()
                + beginExclusive()
                + endExclusive()
                + transmitControlCommand()
                + disconnect()
                + checkExclusive()
                + getBluetoothCard()
                ~ checkCardOpen()
            }
    }
  }


  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.entities {
      class FeitianCardChannel {
                - channelNo : int
                {static} - MANAGE_CHANNEL_COMMAND_CLOSE : CommandAPDU
                {static} - RESPONSE_SUCCESS : int
                {static} - LOW_CHANNEL_NUMBER_VALUE : int
                {static} - MAX_CHANNEL_NO_VALUE : int
                - channelClosed : boolean
                + FeitianCardChannel()
                + FeitianCardChannel()
                + getCard()
                + getChannelNumber()
                + transmit()
                + transmit()
                + close()
                - modifyCommandForLogicalChannel()
                - checkChannelClosed()
      }
    }
  }
  

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.entities {
      class FeitianCardReader {
                - name : String
                {static} - PROTOCOL_T1 : String
                + FeitianCardReader()
                + initialize()
                + isInitialized()
                + connect()
                + connect()
                + getName()
                + isCardPresent()
                + waitForCardAbsent()
                + waitForCardPresent()
                + setName()
      }
    }
  }
  

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
      class FeitianCardReaderProvider {
                - providerDescriptor : ProviderDescriptor
                + FeitianCardReaderProvider()
                + getCardReaderController()
                + getDescriptor()
      }
    }
  }
  

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
      class FeitianConnector {
                - mSocket : BluetoothSocket
                - inputStream : InputStream
                - outputStream : OutputStream
                - feitianDevice : BluetoothDevice
                + FeitianConnector()
                + run()
                - createSocket()
                + getFeitianCard()
      }
    }
  }
  

  FeitianBluetoothReceiver -up-|> BroadcastReceiver
  FeitianCard -up-|> Card
  FeitianCard o-- FeitianCardChannel : basicChannel
  FeitianCardReader o-- CardStatusHandler
  FeitianCardChannel -up-|> CardChannel
  FeitianCardChannel o-- FeitianCard : feitianCard
  FeitianCardReader -up-|> ICardReader
  FeitianCardReader o-- FeitianCard : feitianCard
  FeitianCardReaderController -up-|> AbstractAndroidCardReaderController
  FeitianCardReaderController o-- FeitianBluetoothReceiver : feitianBluetoothReceiver
  FeitianCardReaderProvider -up-|> ICardReaderControllerProvider
  FeitianConnector o-- FeitianCard : feitianCard

  CardStatusHandler -up-|> Handler
  CardStatusHandler o-- CardEventTransmitter : cardEventTransmitter


@enduml
