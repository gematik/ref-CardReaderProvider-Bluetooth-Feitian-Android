@startuml

title __CONTROL's Class Diagram__\n

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
      class CardStatusHandler {
          {static} - LOG : Logger
          + CardStatusHandler()
          + handleMessage()
          + informAboutCardPresent()
      }
    }
  }
  

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
      class FeitianBluetoothReceiver {
          {static} - LOG : Logger
          + onReceive()
      }
    }
  }
  

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
      class FeitianCardReaderController {
          {static} - LOG : Logger
          {static} - instance : FeitianCardReaderController
          - cardReaders : Map<String, ICardReader>
          - bluetoothAdapter : BluetoothAdapter
          - pairedDevices : Set<BluetoothDevice>
          - context : Context
          - FeitianCardReaderController()
          {static} + getInstance()
          + getCardReaders()
          - init()
          - intitializeBluetoothAdapter()
          - createReceiver()
          + createCardEventTransmitter()
          - readDevices()
          - checkUuids()
          - addNewAndInform()
          ~ removeAndInform()
          + checkAdapter()
          + actualizeReaderList()
          + actualizeSocketToDevice()
      }
    }
  }
  

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
      class CardEventTransmitter {
          - cardReader : ICardReader
          ~ CardEventTransmitter()
          + informAboutCardPresent()
          + informAboutCardAbsent()
          + informAboutCardTimeout()
          + informAboutCardUnknown()
      }
    }
  }
  

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
      class FeitianCardReaderProvider {
          - providerDescriptor : ProviderDescriptor
          + FeitianCardReaderProvider()
          + getCardReaderController()
          + getDescriptor()
      }
    }
  }
  

  package de.gematik.ti.cardreader.provider.bluetooth.feitian {
    package de.gematik.ti.cardreader.provider.bluetooth.feitian.control {
      class FeitianConnector {
          {static} - LOG : Logger
          - mSocket : BluetoothSocket
          - inputStream : InputStream
          - outputStream : OutputStream
          - feitianDevice : BluetoothDevice
          - innerCard : Card
          + FeitianConnector()
          + run()
          + getFeitianCard()
          + closeSocket()
      }
    }
  }
  

  CardStatusHandler -up-|> Handler
  CardStatusHandler o-- CardEventTransmitter : cardEventTransmitter
  FeitianBluetoothReceiver -up-|> BroadcastReceiver
  FeitianCardReaderController o-- FeitianBluetoothReceiver : feitianBluetoothReceiver
  FeitianCardReaderController +-down- CardEventTransmitter
  FeitianCardReaderProvider -up-|> ICardReaderControllerProvider
  FeitianConnector o-- FeitianCard : feitianCard


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
